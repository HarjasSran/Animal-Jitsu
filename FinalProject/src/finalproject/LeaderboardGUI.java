/**
 * Caroline Widdecombe, Aidan Goodyer, Harjas Sran
 * Leaderboard GUI and sorting with reading and writing with jar
 * April 10 2021
 */
package finalproject;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.FileWriter;
import javax.swing.JOptionPane;

public class LeaderboardGUI extends javax.swing.JFrame {

    MainMenuGUI m;
    static String output = "Name\tRank\n\n";

    ArrayList<User> userList = new ArrayList();
    static ArrayList<String> list = new ArrayList();

    public LeaderboardGUI(MainMenuGUI mainMenu) {
        m = mainMenu;
        initComponents();
        try {
            //finds file on user directory
            FileInputStream in = new FileInputStream(System.getProperty("user.dir") + "/saves/save.txt");
            //scans directory
            Scanner s = new Scanner(in);
            while (s.hasNextLine()) {//while the input stream has lines
                //read file and add to arraylist
                String newData[] = new String[2];
                newData[0] = (s.nextLine());
                newData[1] = (s.nextLine());
                list.add(newData[0]);
                list.add(newData[1]);

            }
            //half size of directory 
            int halfList = list.size() / 2;
            //array holding names of user
            String name[] = new String[halfList];
            //arraylist holding all users 
            ArrayList<User> users = new ArrayList(halfList);
            //array holding level of user
            int level[] = new int[halfList];
          
            //adds new users to the arraylist of users
            for (int i = 0; i < halfList; i++) {
                name[i] = list.get(i * 2);
                level[i] = Integer.parseInt(list.get((i * 2) + 1));
                users.add(i, new User(name[i], level[i]));
            }
            //clear list reading input stream
            list.clear();
            //sort the users using quick sort by rank(recursion and sorting)
            userList = descendingQuickSort(users, 0, halfList - 1);
            //creates output to show user
            for (int i = 0; i < halfList; i++) {
                output = output + userList.get(i).getName() + "\t" + userList.get(i).getRank() + "\n";
            }
            //show user the sorted output
            textList.setText(output);
            //reset output string
            output = "Name\tRank\n\n";

        } catch (IOException e) {
            Logger.getLogger(Highscores.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(null, "Error!");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblLeaderboard = new javax.swing.JLabel();
        txtList = new javax.swing.JScrollPane();
        textList = new javax.swing.JTextArea();
        searchQuery = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnMainMenu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Leaderboard");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblLeaderboard.setFont(new java.awt.Font("Krungthep", 0, 24)); // NOI18N
        lblLeaderboard.setForeground(new java.awt.Color(0, 153, 0));
        lblLeaderboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/leaderboardButton3.png"))); // NOI18N
        getContentPane().add(lblLeaderboard, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, -1, -1));

        textList.setEditable(false);
        textList.setColumns(20);
        textList.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        textList.setRows(5);
        txtList.setViewportView(textList);

        getContentPane().add(txtList, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 160, 350, 510));
        getContentPane().add(searchQuery, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 230, -1));

        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Search");
        jButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 5));
        jButton1.setContentAreaFilled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 130, 80, -1));

        btnMainMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/arrowButtonLeft1.png"))); // NOI18N
        btnMainMenu.setBorderPainted(false);
        btnMainMenu.setContentAreaFilled(false);
        btnMainMenu.setFocusPainted(false);
        btnMainMenu.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/arrowButtonLeft2.png"))); // NOI18N
        btnMainMenu.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/arrowButtonLeft3.png"))); // NOI18N
        btnMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMainMenuActionPerformed(evt);
            }
        });
        getContentPane().add(btnMainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, 70, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/city.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -100, 830, 780));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainMenuActionPerformed
        //if the user presses the back button, close this window and open the main menu window
        this.setVisible(false);
        m.setVisible(true);
    }//GEN-LAST:event_btnMainMenuActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        //search for what user enters
        String query = searchQuery.getText();

        textList.setText(linearSearch(userList, query));

    }//GEN-LAST:event_jButton1ActionPerformed

   
    /**
     * Method writing into the text file with saved highscores
     * @param user 
     */
    public static void writeData(User user) {
        //new added scores from user
        String data[] = new String[2];
        data[0] = user.getName();
        data[1] = user.getRank() + "";
        try {
            //read current file
            FileInputStream in = new FileInputStream(System.getProperty("user.dir") + "/saves/save.txt");
            Scanner s = new Scanner(in);
            //save current file into arraylist
            while (s.hasNextLine()) {
                String newData[] = new String[2];
                newData[0] = (s.nextLine());
                newData[1] = (s.nextLine());
                list.add(newData[0]);
                list.add(newData[1]);

            }

        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        //save new values into arraylist
        list.add(data[0]);
        list.add(data[1]);

        
        try {
            //write the new scores into the save text file in the users directory
            FileWriter myWriter = new FileWriter(System.getProperty("user.dir") + "/saves/save.txt");
            for (int i = 0; i < list.size(); i++) {
                myWriter.write(list.get(i)+"\n");
            }
            
            myWriter.close();
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error" + e);
        } catch (IOException ex ) {
            JOptionPane.showMessageDialog(null, "Error: " + ex);
            Logger.getLogger(Highscores.class.getName()).log(Level.SEVERE, null, ex);
        }


    }/**
     * method used to search the current arraylist for what the user searched for 
     * @param users - all the current users
     * @param q - what the user wants to see
     * @return - the user that the user has searched for 
     */
    public static String linearSearch(ArrayList<User> users, String q) {
        //output is now black
        String output = "";
        //check all the users for the User score that they have searched for 
        for (int i = 0; i < users.size(); i++) {
            if (users.get(i).getName().toLowerCase().contains(q.toLowerCase())) {
                output += "\n" + users.get(i).toString();
            }

        }
        return output;

    }

    public static ArrayList descendingQuickSort(ArrayList<User> users, int l, int r) {

        // sort is complete when the left bounds of the array are equal or greater than the right bound
        if (l >= r) {

            return users;

        }

        int left = l;
        int right = r;

        //pivot at the midpoint between left and right boundary, partitioning two side of array
        int pivot = users.get((l + r) / 2).getRank();

        //repeat until the left and the right touch
        while (left < right) {

            //increment left until it finds a value less than the pivot (flipped operator from ascending) 
            while (users.get(left).getRank() > pivot) {

                left++;
            }

            //decrement the right until it finds a value greater than pivot (flipped operator from ascending) 
            while (users.get(right).getRank() < pivot) {

                right--;

            }

            if (left <= right) {
                //swap the number at the left and right iterators
                User temp = users.get(left);
                users.set(left, users.get(right));
                users.set(right, temp);
                left++;
                right--;

            }

        }

        //quicksort both partitions of the array
        descendingQuickSort(users, l, right);
        descendingQuickSort(users, left, r);
        return users;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMainMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblLeaderboard;
    private javax.swing.JTextField searchQuery;
    private javax.swing.JTextArea textList;
    public static javax.swing.JScrollPane txtList;
    // End of variables declaration//GEN-END:variables
}
